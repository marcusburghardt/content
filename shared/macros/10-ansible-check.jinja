{{#
  Pass a project variable name and this macro will create all necessary conditionals to
  dynamically set the variable value based on target product and profile. This way everything
  that is needed to check multiple systems is defined in a single Playbook.

:param variable_name: The project variable name. Project variables are defined in .var files.
:type msg: str

#}}
{{%- macro ansible_check_variable(variable_name) -%}}
    {{%- if variable_name | length == 1 -%}}
        {{{ variable_name['default'] }}}
    {{%- else -%}}
        |-
    {{%- for product in variable_name %}}
        {{%- for profile in variable_name[product] -%}}
            {{%- if product != 'default' -%}}
                {{%- if loop.first %}}
        {%- if ansible_facts['os_family'] == '{{{ product }}}' and '{{{ profile }}}' == '{{{ profile }}}' -%}
                {{%- else %}}
        {%- elif ansible_facts['os_family'] == '{{{ product }}}' and '{{{ profile }}}' == '{{{ profile }}}' -%}
                {{%- endif %}}
          {{{ variable_name[product][profile] }}}
            {{%- endif %}}
        {{%- endfor %}}
    {{%- endfor %}}
        {%- else -%}
          {{{ variable_name['default'] }}}
        {%- endif -%}
    {{%- endif -%}}
{{%- endmacro -%}}


{{#
  Pass a product property name and this macro will create all necessary conditionals to
  dynamically set the property value based on target product. This way everything that is needed
  to check multiple products is defined in a single Playbook.

:param property_name: The property name. Products properties are defined in product.yml files.
:type msg: str

#}}
{{%- macro ansible_check_property(property_name) -%}}
    {{%- if property_name | length == 1 -%}}
        {{{ property_name['default'] }}}
    {{%- else -%}}
        |-
    {{%- for product in property_name %}}
        {{%- if product != 'default' -%}}
            {{%- if loop.first %}}
        {%- if ansible_facts['os_family'] == '{{{ product }}}' -%}
            {{%- else %}}
        {%- elif ansible_facts['os_family'] == '{{{ product }}}' -%}
            {{%- endif %}}
        {{{ property_name[product] }}}
        {{%- endif -%}}
    {{%- endfor %}}
        {%- else -%}
        {{{ property_name['default'] }}}
        {%- endif -%}
    {{%- endif -%}}
{{%- endmacro -%}}


{{#
  Macro used to show the result of a file existence check.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param filepath: The absolute path of the file checked for existence.
:filepath msg: str

#}}
{{%- macro ansible_check_file_existence_result(rule_title, rule_id, filepath) -%}}
    - name: "{{{ rule_title }}} - Assessment for {{{ filepath }}} Existence"
      ansible.builtin.debug:
        msg:
          - "File existence:      {{ assert_{{{ rule_id }}}_file_existence.msg | default('ERROR') }}"
          - "Final Result:        {{ assert_{{{ rule_id }}}_final_result.msg | default('ERROR') }}"
{{%- endmacro -%}}


{{#
  Macro used to show the result of a file content check.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param filepath: The absolute path of the file checked for content.
:filepath msg: str

#}}
{{%- macro ansible_check_file_content_result(rule_title, rule_id, filepath) -%}}
    - name: "{{{ rule_title }}} - Assessment for Parameters in {{{ filepath }}}"
      ansible.builtin.debug:
        msg:
          - "File existence:      {{ assert_{{{ rule_id }}}_file_existence.msg | default('ERROR') }}"
          - "Content existence:   {{ assert_{{{ rule_id }}}_content_match.msg | default('SKIPPED') }}"
          - "Content duplication: {{ assert_{{{ rule_id }}}_content_duplication.msg | default('SKIPPED') }}"
          - "Final Result:        {{ assert_{{{ rule_id }}}_final_result.msg | default('ERROR') }}"
{{%- endmacro -%}}


{{#
  Macro used to show the result of a file content value check.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param filepath: The absolute path of the file checked for content values.
:filepath msg: str

#}}
{{%- macro ansible_check_file_content_value_result(rule_title, rule_id, filepath) -%}}
    - name: "{{{ rule_title }}} - Assessment for Parameters Values in {{{ filepath }}}"
      ansible.builtin.debug:
        msg:
          - "File existence:      {{ assert_{{{ rule_id }}}_file_existence.msg | default('ERROR') }}"
          - "Content existence:   {{ assert_{{{ rule_id }}}_content_match.msg | default('SKIPPED') }}"
          - "Content duplication: {{ assert_{{{ rule_id }}}_content_duplication.msg | default('SKIPPED') }}"
          - "Correct values:      {{ (assert_{{{ rule_id }}}_parameters_values.results | default([]) | map(attribute='msg') | join(', ') if assert_{{{ rule_id }}}_parameters_values.results is defined else 'SKIPPED') }}"
          - "Final Result:        {{ assert_{{{ rule_id }}}_final_result.msg | default('ERROR') }}"
{{%- endmacro -%}}


{{#
  Macro used to assert the final result all checks. In many cases it is only necessary to know the
  final result, for example during an auditing process. In other situations, for example, when the
  system administrator is hardening the system it is very useful to know more specifically which
  checks are failing. This macro will show the final result based on the combination of a list of
  checks.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param registers: The list of registers to be considered for the final assessment.
:registers msg: list

#}}
{{%- macro ansible_check_assert_final_result(rule_title, rule_id, registers) -%}}
    - name: "{{{ rule_title }}} - Define the Final Assessment for {{{ rule_id }}}"
      ansible.builtin.assert:
        that:
          {{%- for register in registers %}}
          - {{{ register }}}.msg in ["PASS", "SKIPPED"]
          {{%- endfor %}}
        fail_msg: FAIL
        success_msg: PASS
        quiet: true
      register: assert_{{{ rule_id }}}_final_result
      changed_when:
        {{%- for register in registers %}}
        - {{{ register }}}.msg not in ["PASS", "SKIPPED"]
        {{%- endfor %}}
      failed_when: false
{{%- endmacro -%}}


{{#
  Macro with tasks used to assert if a file is present in the system.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param filepath: The absolute path of the file checked for existence.
:filepath msg: str

#}}
{{%- macro ansible_check_assert_file_existence_tasks(rule_title, rule_id, filepath) -%}}
    - name: "{{{ rule_title }}} - Check File Existence: {{{ filepath }}}"
      ansible.builtin.stat:
        path: "{{{ filepath }}}"
      register: check_result_{{{ rule_id }}}_filestat

    - name: "{{{ rule_title }}} - Assert File Existence: {{{ filepath }}}"
      ansible.builtin.assert:
        that: check_result_{{{ rule_id }}}_filestat.stat.exists
        fail_msg: FAIL
        success_msg: PASS
        quiet: true
      register: assert_{{{ rule_id }}}_file_existence
      changed_when:
        - assert_{{{ rule_id }}}_file_existence.msg not in ["PASS", "SKIPPED"]
      failed_when: false
{{%- endmacro -%}}


{{#
  Macro with task used to assert that a match exists in the content of a file present
  in the system.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param filepath: The absolute path of the file checked for its content.
:filepath msg: str

#}}
{{%- macro ansible_check_assert_file_content_match(rule_title, rule_id, filepath) -%}}
        - name: "{{{ rule_title }}} - Assert the Content Matches At Least Once in File: {{{ filepath }}}"
          ansible.builtin.assert:
            that:
              - {{{ rule_id }}}_extracted_values | length > 0
            fail_msg: FAIL
            success_msg: PASS
            quiet: true
          register: assert_{{{ rule_id }}}_content_match
          changed_when:
            - assert_{{{ rule_id }}}_content_match.msg not in ["PASS", "SKIPPED"]
          failed_when: false
{{%- endmacro -%}}


{{#
  Macro with task used to assert duplication in the content of a file present in the system.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param filepath: The absolute path of the file checked for its content.
:filepath msg: str

#}}
{{%- macro ansible_check_assert_file_content_duplication(rule_title, rule_id, filepath) -%}}
        - name: "{{{ rule_title }}} - Assert the Content Matches Only Once in File: {{{ filepath }}}"
          ansible.builtin.assert:
            that:
              - {{{ rule_id }}}_extracted_values | length == 1
            fail_msg: FAIL ({{ {{{ rule_id }}}_extracted_values | length }} matches)
            success_msg: PASS
            quiet: true
          register: assert_{{{ rule_id }}}_content_duplication
          changed_when:
            - assert_{{{ rule_id }}}_content_duplication.msg not in ["PASS", "SKIPPED"]
          failed_when: false
{{%- endmacro -%}}


{{#
  Macro with task used to assert parameter value in the content of a file present in the system.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param comparison_operation: Operation to compare the current value with the expected value.
:filepath msg: str
:param expected_value: The expected value to be set in a parameter found by search_regex.
:filepath msg: str

#}}
{{%- macro ansible_check_assert_file_content_parameters_values(rule_title, rule_id, comparison_operation, expected_value) -%}}
        - name: "{{{ rule_title }}} - Assert That Found Values Are: {{{ comparison_operation }}} {{{ expected_value }}}"
          ansible.builtin.assert:
            that:
              - item {{{ comparison_operation }}} {{{ expected_value | replace("{{", "") | replace("}}", "") }}}
            fail_msg: FAIL ({{item}})
            success_msg: PASS ({{item}})
            quiet: true
          loop: "{{ {{{ rule_id }}}_extracted_values | map('int') }}"
          register: assert_{{{ rule_id }}}_parameters_values
          changed_when:
            - assert_{{{ rule_id }}}_parameters_values.msg not in ["PASS", "SKIPPED"]
          failed_when: false
{{%- endmacro -%}}


{{#
  Macro used to extract the content of a file present in the system and save it in a register
  encoded in base64. It is encoded in base64 because this is the standard for the
  ansible.builtin.slurp module, which is part of the core modules and designed to only collect
  information. Other modules could be used to extract file content, but they would also be capable
  to make modifications, even if accidantaly. slurp module mitigates this risk.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param filepath: The absolute path of the file checked for its content.
:filepath msg: str

#}}
{{%- macro ansible_check_file_content_extract(rule_title, rule_id, filepath) -%}}
    - name: "{{{ rule_title }}} - Extract File Content: {{{ filepath }}}"
      when:
        - check_result_{{{ rule_id }}}_filestat.stat.exists
      block:
        - name: "{{{ rule_title }}} - Read File Content and Store it Encoded in Base64: {{{ filepath }}}"
          ansible.builtin.slurp:
            src: "{{{ filepath }}}"
          register: check_result_{{{ rule_id }}}_filecontent
{{%- endmacro -%}}


{{#
  Macro with tasks used to extract the content of a file present in the system.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param filepath: The absolute path of the file checked for its content.
:filepath msg: str
:param search_regex: The regex used to match the file content.
:filepath msg: str

#}}
{{%- macro ansible_check_file_content_select(rule_title, rule_id, filepath, search_regex) -%}}
    {{{ ansible_check_assert_file_existence_tasks(rule_title, rule_id, filepath) }}}

    {{{ ansible_check_file_content_extract(rule_title, rule_id, filepath) }}}

        - name: '{{{ rule_title }}} - Search for Content Using Regex and Save as a Fact: "{{{ search_regex }}}"'
          ansible.builtin.set_fact:
            {{{ rule_id }}}_extracted_values: '{{ check_result_{{{ rule_id }}}_filecontent["content"] | b64decode | regex_findall("{{{ search_regex }}}", "\\1") }}'
{{%- endmacro -%}}


{{#
  Macro with tasks used to assert the content of a file present in the system.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param filepath: The absolute path of the file checked for existence.
:filepath msg: str
:param search_regex: The regex used to match the file content.
:filepath msg: str

#}}
{{%- macro ansible_check_file_content_tasks(rule_title, rule_id, filepath, search_regex) -%}}
    {{{ ansible_check_file_content_select(rule_title, rule_id, filepath, search_regex) }}}

    - name: "{{{ rule_title }}} - Assert Content Existence and Duplication in File: {{{ filepath }}}"
      when:
        - check_result_{{{ rule_id }}}_filestat.stat.exists
      block:
        {{{ ansible_check_assert_file_content_match(rule_title, rule_id, filepath) }}}

        {{{ ansible_check_assert_file_content_duplication(rule_title, rule_id, filepath) }}}
{{%- endmacro -%}}


{{#
  Macro with tasks used to assert the parameters values of a file present in the system.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param filepath: The absolute path of the file checked for existence.
:filepath msg: str
:param search_regex: The regex used to match the file content.
:filepath msg: str
:param comparison_operation: Operation to compare the current value with the expected value.
:filepath msg: str
:param expected_value: The expected value to be set in a parameter found by search_regex.
:filepath msg: str

#}}
{{%- macro ansible_check_file_content_values_tasks(rule_title, rule_id, filepath, search_regex, comparison_operation, expected_value) -%}}
    {{{ ansible_check_assert_file_existence_tasks(rule_title, rule_id, filepath) }}}

    {{{ ansible_check_file_content_select(rule_title, rule_id, filepath, search_regex) }}}

    - name: "{{{ rule_title }}} - Assert Content Existence, Duplication and Value in File: {{{ filepath }}}"
      when:
        - check_result_{{{ rule_id }}}_filestat.stat.exists
      block:
        {{{ ansible_check_assert_file_content_match(rule_title, rule_id, filepath) }}}

        {{{ ansible_check_assert_file_content_duplication(rule_title, rule_id, filepath) }}}

        {{{ ansible_check_assert_file_content_parameters_values(rule_title, rule_id, comparison_operation, expected_value) }}}
{{%- endmacro -%}}


{{#
  Macro used to asset if an specific file is present in the system.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param filepath: The absolute path of the file checked for existence.
:filepath msg: str

#}}
{{%- macro ansible_check_file_existence(rule_title, rule_id, filepath) -%}}
    {{{ ansible_check_assert_file_existence_tasks(rule_title, rule_id, filepath) }}}

    {{{ ansible_check_assert_final_result(rule_title, rule_id, [
      "assert_"~ rule_id ~"_file_existence"]) }}}

    {{{ ansible_check_file_existence_result(rule_title, rule_id, filepath) }}}
{{%- endmacro -%}}


{{#
  Macro used to assert if an specific content is present in a file.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param filepath: The absolute path of the file checked for existence.
:filepath msg: str
:param search_regex: The regex used to match the file content.
:filepath msg: str

#}}
{{%- macro ansible_check_file_content(rule_title, rule_id, filepath, search_regex) -%}}
    {{{ ansible_check_file_content_tasks(rule_title, rule_id, filepath, search_regex) }}}

    {{{ ansible_check_assert_final_result(rule_title, rule_id, [
      "assert_"~ rule_id ~"_file_existence",
      "assert_"~ rule_id ~"_content_match",
      "assert_"~ rule_id ~"_content_duplication"]) }}}

    {{{ ansible_check_file_content_result(rule_title, rule_id, filepath) }}}
{{%- endmacro -%}}


{{#
  Macro used to assert if an specific value for a parameter is present in a file.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str
:param filepath: The absolute path of the file checked for existence.
:filepath msg: str
:param search_regex: The regex used to match the file content.
:filepath msg: str
:param comparison_operation: Operation to compare the current value with the expected value.
:filepath msg: str
:param expected_value: The expected value to be set in a parameter found by search_regex.
:filepath msg: str

#}}
{{%- macro ansible_check_file_content_values(rule_title, rule_id, filepath, search_regex, comparison_operation, expected_value) -%}}
    {{{ ansible_check_file_content_values_tasks(rule_title, rule_id, filepath, search_regex, comparison_operation, expected_value) }}}

    {{{ ansible_check_file_content_value_result(rule_title, rule_id, filepath) }}}
{{%- endmacro -%}}

{{#
  Macro used to enumerate the local interactive users.

:param rule_title: The rule title to be included in Ansible tasks names.
:rule_title msg: str
:param rule_id: The rule id used in registers.
:rule_id msg: str

#}}
{{%- macro ansible_check_enumerate_interactive_users(rule_title, rule_id) -%}}
    - name: "{{{ rule_title }}} - Read /etc/passwd File Content and Store it Encoded in Base64"
      ansible.builtin.slurp:
        src: "/etc/passwd"
      register: check_result_passwd_filecontent

    - name: '{{{ rule_title }}} - Parse /etc/passwd and Store User Lines as a Dictionary"'
      ansible.builtin.set_fact:
        local_users_dict: '{{ check_result_passwd_filecontent["content"] | b64decode | splitlines | map('split', ':') | map('slice', 0, 7) | map('list') }}'

    - name: '{{{ rule_title }}} - Debug'
      ansible.builtin.debug:
        var: local_users_dict

{{%- endmacro -%}}